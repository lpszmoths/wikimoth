{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wikimoth # Code Wiki page sample content # --- title: My Document summary: A brief description of my document. some_url: https://example.com --- This is the first paragraph of the document. See also # Markdown layout and reference","title":"Home"},{"location":"#wikimoth","text":"Code","title":"Wikimoth"},{"location":"#wiki-page-sample-content","text":"--- title: My Document summary: A brief description of my document. some_url: https://example.com --- This is the first paragraph of the document.","title":"Wiki page sample content"},{"location":"#see-also","text":"Markdown layout and reference","title":"See also"},{"location":"code/css/","text":"CSS # Importing a local or relative font in @font-face # @font-face { font-family: 'My Font'; src: local(\"My Font\"), url(\"./fonts-my-fonts.ttf\") format(\"truetype\"); }","title":"CSS"},{"location":"code/css/#css","text":"","title":"CSS"},{"location":"code/css/#importing-a-local-or-relative-font-in-font-face","text":"@font-face { font-family: 'My Font'; src: local(\"My Font\"), url(\"./fonts-my-fonts.ttf\") format(\"truetype\"); }","title":"Importing a local or relative font in @font-face"},{"location":"code/godot/","text":"Project setup # Download and install godot-next Download and install insert gizmos plugin here Finding the current camera # get_viewport().get_camera() Is in editor? # if Engine.editor_hint: # editor code Instantiating packed scenes # const MyPrefab = preload(\"res://path/to/prefab.tscn\") var child = MyPrefab.instance() add_child(child) Raycasting downward # var raycast: RayCast = RayCast.new() raycast.transform.origin = Vector3(x, y, z) raycast.cast_to = Vector3(0, -1, 0) # default var collision_point: Vector3 = raycast.get_collision_point() var collision_normal: Vector3 = raycast.get_collision_normal() var collider: Object = get_collider() Throwing errors/exceptions # printerr(\"Error\") Making custom editors # tool extends Node const CustomPropertyEditor = preload(\"res://path/to/custom-property-editor.gd\") func _parse_begin(editor: EditorInspectorPlugin): var button: Button = InspectorControls.new_button( \"Button label\", is_toggle, self, \"_on_button_click\" ) editor.add_custom_control(button) func _parse_category( editor: EditorInspectorPlugin, category_name: String): if not category_name == 'Script properties': return var button: Button = InspectorControls.new_button( \"Button label\", is_toggle, self, \"_on_button_click\" ) editor.add_custom_control(button) func _parse_property( editor: EditorInspectorPlugin, info: PropertyInfo ): var name = info.name var hint = info.hint var hint_string = info.hint_string var type = info.type if info.name == 'my_prop_name': var prop_editor: EditorProperty = CustomPropertyEditor.new() editor.add_property_editor( 'my_prop_name', prop_editor ) # Returning true removes the built-in editor # for this property, otherwise allows to insert # a custom editor before the built-in one. # Returning true removes the built-in editor # for this property, otherwise allows to insert # a custom editor before the built-in one. return false func _parse_end(editor: EditorInspectorPlugin): var button: Button = InspectorControls.new_button( \"Button label\", is_toggle, self, \"_on_button_click\" ) editor.add_custom_control(button) Making custom gizmos # TODO","title":"Godot"},{"location":"code/godot/#project-setup","text":"Download and install godot-next Download and install insert gizmos plugin here","title":"Project setup"},{"location":"code/godot/#finding-the-current-camera","text":"get_viewport().get_camera()","title":"Finding the current camera"},{"location":"code/godot/#is-in-editor","text":"if Engine.editor_hint: # editor code","title":"Is in editor?"},{"location":"code/godot/#instantiating-packed-scenes","text":"const MyPrefab = preload(\"res://path/to/prefab.tscn\") var child = MyPrefab.instance() add_child(child)","title":"Instantiating packed scenes"},{"location":"code/godot/#raycasting-downward","text":"var raycast: RayCast = RayCast.new() raycast.transform.origin = Vector3(x, y, z) raycast.cast_to = Vector3(0, -1, 0) # default var collision_point: Vector3 = raycast.get_collision_point() var collision_normal: Vector3 = raycast.get_collision_normal() var collider: Object = get_collider()","title":"Raycasting downward"},{"location":"code/godot/#throwing-errorsexceptions","text":"printerr(\"Error\")","title":"Throwing errors/exceptions"},{"location":"code/godot/#making-custom-editors","text":"tool extends Node const CustomPropertyEditor = preload(\"res://path/to/custom-property-editor.gd\") func _parse_begin(editor: EditorInspectorPlugin): var button: Button = InspectorControls.new_button( \"Button label\", is_toggle, self, \"_on_button_click\" ) editor.add_custom_control(button) func _parse_category( editor: EditorInspectorPlugin, category_name: String): if not category_name == 'Script properties': return var button: Button = InspectorControls.new_button( \"Button label\", is_toggle, self, \"_on_button_click\" ) editor.add_custom_control(button) func _parse_property( editor: EditorInspectorPlugin, info: PropertyInfo ): var name = info.name var hint = info.hint var hint_string = info.hint_string var type = info.type if info.name == 'my_prop_name': var prop_editor: EditorProperty = CustomPropertyEditor.new() editor.add_property_editor( 'my_prop_name', prop_editor ) # Returning true removes the built-in editor # for this property, otherwise allows to insert # a custom editor before the built-in one. # Returning true removes the built-in editor # for this property, otherwise allows to insert # a custom editor before the built-in one. return false func _parse_end(editor: EditorInspectorPlugin): var button: Button = InspectorControls.new_button( \"Button label\", is_toggle, self, \"_on_button_click\" ) editor.add_custom_control(button)","title":"Making custom editors"},{"location":"code/godot/#making-custom-gizmos","text":"TODO","title":"Making custom gizmos"},{"location":"code/python/","text":"Python page # Lorem et ipsum Basic usage # Installing packages from requirements.txt # pip install -r requirements.txt Updating requirements.txt # pip freeze > requirements.txt Maintaining requirements.txt # Checking for outdated packages # pip list --outdated Updating a package # pip install -U packagename Updating all packages # pip install -U -r requirements.txt Committing updates # pip freeze > requirements.txt","title":"Python"},{"location":"code/python/#python-page","text":"Lorem et ipsum","title":"Python page"},{"location":"code/python/#basic-usage","text":"","title":"Basic usage"},{"location":"code/python/#installing-packages-from-requirementstxt","text":"pip install -r requirements.txt","title":"Installing packages from requirements.txt"},{"location":"code/python/#updating-requirementstxt","text":"pip freeze > requirements.txt","title":"Updating requirements.txt"},{"location":"code/python/#maintaining-requirementstxt","text":"","title":"Maintaining requirements.txt"},{"location":"code/python/#checking-for-outdated-packages","text":"pip list --outdated","title":"Checking for outdated packages"},{"location":"code/python/#updating-a-package","text":"pip install -U packagename","title":"Updating a package"},{"location":"code/python/#updating-all-packages","text":"pip install -U -r requirements.txt","title":"Updating all packages"},{"location":"code/python/#committing-updates","text":"pip freeze > requirements.txt","title":"Committing updates"}]}